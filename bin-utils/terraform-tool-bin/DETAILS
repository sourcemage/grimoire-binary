           SPELL=terraform-tool-bin
          SPELLX=${SPELL/-tool-bin/}
         VERSION=0.10.4
if [[ ${SMGL_COMPAT_ARCHS[1]} == "x86_64" ]]; then
            ARCH=amd64
     SOURCE_HASH=sha512:549e4969a8e1a303a7bc66fa92505e2bd87d298185b8c28a62c379aaebd77a6002bfdba89e331ccd0ea90b8612a7c1db708dfef81028ba201b19e7d80edd9381
else
            ARCH=386
     SOURCE_HASH=sha512:fd21a828e0359cbff1b8a6261ca0a65944aa4ca966fe9ce34055b4cb28609db54ceb5369a877a7eb17a9cbebe126ec00ae23d57ed68358a3ee55206d5b62cc7d
fi
          SOURCE=${SPELLX}_${VERSION}_linux_${ARCH}.zip
   SOURCE_URL[0]=https://releases.hashicorp.com/${SPELLX}/${VERSION}/${SOURCE}
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/${SPELL}-${VERSION}"
     GATHER_DOCS=off
        WEB_SITE=https://www.terraform.io/
         ENTERED=20160731
      LICENSE[0]=MPL
           SHORT="tool for building, changing, and versioning infrastructure"
cat << EOF
This is a binary version of Terraform.

Terraform is a tool for building, changing, and versioning infrastructure safely
and efficiently. Terraform can manage existing and popular service providers as
well as custom in-house solutions.

The key features of Terraform are:

- Infrastructure as Code: Infrastructure is described using a high-level
configuration syntax. This allows a blueprint of your datacenter to be versioned
and treated as you would any other code. Additionally, infrastructure can be
shared and re-used.

- Execution Plans: Terraform has a "planning" step where it generates an
execution plan. The execution plan shows what Terraform will do when you call
apply. This lets you avoid any surprises when Terraform manipulates
infrastructure.

- Resource Graph: Terraform builds a graph of all your resources, and
parallelizes the creation and modification of any non-dependent resources.
Because of this, Terraform builds infrastructure as efficiently as possible, and
operators get insight into dependencies in their infrastructure.

- Change Automation: Complex changesets can be applied to your infrastructure
with minimal human interaction. With the previously mentioned execution plan and
resource graph, you know exactly what Terraform will change and in what order,
avoiding many possible human errors.
EOF
